# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest
  
stages:
  - stage: TerraformValidate
    jobs:
    - job: TerraformValidateJob
      continueOnError: false
      
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/AKS_TERRAFORM'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@1
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/AKS_TERRAFORM'
          backendServiceArm: 'Pay-As-You-Go(efbc1e1f-72e7-41b7-b61b-af618f7575c4)'
          backendAzureRmResourceGroupName: 'devopsrg'
          backendAzureRmStorageAccountName: 'backendstorageterra'
          backendAzureRmContainerName: 'statecont'
          backendAzureRmKey: 'aks.tfstate'

      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/AKS_TERRAFORM'
          environmentServiceNameAzureRM: 'Pay-As-You-Go(efbc1e1f-72e7-41b7-b61b-af618f7575c4)'

      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/AKS_TERRAFORM'
          environmentServiceNameAzureRM: 'Pay-As-You-Go(efbc1e1f-72e7-41b7-b61b-af618f7575c4)'
      


